// SPDX-License-Identifier: GPL-2.0-or-later
{
  parserClass="org.openstreetmap.josm.idea.mapcss_intellij.parser.MapCSSParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="MapCSS"
  psiImplClassSuffix="Impl"
  psiPackage="org.openstreetmap.josm.idea.mapcss_intellij.psi"
  psiImplPackage="org.openstreetmap.josm.idea.mapcss_intellij.psi.impl"

  elementTypeHolderClass="org.openstreetmap.josm.idea.mapcss_intellij.psi.MapCSSTypes"
  elementTypeClass="org.openstreetmap.josm.idea.mapcss_intellij.psi.MapCSSElementType"
  tokenTypeClass="org.openstreetmap.josm.idea.mapcss_intellij.psi.MapCSSTokenType"
  tokens=[
    PP_AND="and"
    PP_OR="or"
    PP_NOT="not"
    PP_SUPPORTS="@supports"
    SET="set"
    LBRACE="{"
    RBRACE="}"
    LPAR="("
    RPAR=")"
    COMMA=","
    STAR="*"
    SLASH="/"
    LSQUARE="["
    RSQUARE="]"
    GREATER_EQUAL=">="
    LESS_EQUAL="<="
    GREATER=">"
    LESS="<"
    EXCLAMATION="!"
    TILDE="~"
    DCOLON="::"
    COLON=":"
    SEMICOLON=";"
    PIPE="|"
    PIPE_Z="|z"
    PLUS="+"
    MINUS="-"
    AMPERSAND="&"
    QUESTION="?"
    DOLLAR="$"
    FULLSTOP="."
    DEG="°"
    SUBSET_OR_EQUAL="regexp:[∈⊆]"
    NOT_SUBSET_OR_EQUAL="⊈"
    SUPERSET_OR_EQUAL="⊇"
    NOT_SUPERSET_OR_EQUAL="⊉"
    CROSSING="⧉"
    PERCENT="%"
    NODE="node"
    WAY="way"
    RELATION="relation"
    META="meta"
    AREA="area"
    CANVAS="canvas"
    LINE="line"
    SETTING="setting"
    AT="@"
    // Tokens seem to be matched in order. Therefore regexes must be last..
    PREDEFINED="\\[dDsSwWbBAGZz]"
    //REGEX_CHAR_WITHOUT_STAR="regexp:[ -)+-.,0-[]-~\u0080-\uFFFF]|\\/|\\\\|\\[|\\]|\\+|\\.|\\'|\\\"|\\(|\\)|\\{|\\}|\\?|\\*|\\^|\\$|\\|\\p|PREDEFINED" // FIXME
    //REGEX="regexp:/" REGEX_CHAR_WITHOUT_STAR "(" REGEX_CHAR_WITHOUT_START "|*)*/" // FIXME
    UINT="regexp:\d+"
    HEXCOLOR="regexp:#([0-9a-fA-F]{8}|[0-9a-fA-F]{6}|[0-9a-fA-F]{3})"
    space="regexp:[ \t\n\r\f]+" // This should not be used -- it is automatically used as a whitespace token.
    block_comment="regexp:/\*(.|\n|\r)*?\*/" // This is a "special" token
    STRING="regexp:(['\"]).*?[^\\]\1"
    IDENT="regexp:[a-zA-Z_]([a-zA-Z_0-9-])*"
    REGEX="regexp:/.*?[^\\]/"
  ]
}

root ::= root_item* {recoverWhile=eof_recover}
private root_item   ::= !<<eof>> (css_setting | rule | import2)* {pin=1 recoverWhile=eof_recover}
css_setting         ::= SETTING DCOLON IDENT declarations
rule                ::= <<comma_separated_list selector>> declarations // {pin=1 recoverWhile=rule_recover}
import2             ::= AT "import" "url" LPAR STRING RPAR IDENT SEMICOLON {pin=1 recoverWhile=statement_recover}
zoom                ::= PIPE_Z range
selector            ::= link_selector | sub_selector (GREATER sub_selector)?
link_selector       ::= sub_selector GREATER LSQUARE 'role=' specifier RSQUARE object?
sub_selector        ::= object zoom? maybeClazzes* tests? maybeClazzes* layer?
range               ::= UINT MINUS UINT | UINT MINUS | MINUS UINT | UINT
tests               ::= test+// | tests test
test                ::= LSQUARE condition RSQUARE
inner condition     ::= key_function binary (specifier | REGEX) | unary? key_function falsy? | REGEX
private key         ::= STRING | (allowable_ident (COLON allowable_ident)?)
private key_function ::= function | key
private falsy       ::= QUESTION EXCLAMATION?
binary              ::= "=" | "!=" | "=~" | "~="| GREATER | LESS | GREATER_EQUAL | LESS_EQUAL
unary               ::= MINUS | EXCLAMATION
maybeClazzes        ::= (clazz | EXCLAMATION clazz)+
layer               ::= DCOLON IDENT
clazz               ::= FULLSTOP IDENT | COLON IDENT
object              ::= (NODE | WAY | RELATION | AREA | LINE | CANVAS | STAR | META)
meta comma_separated_list   ::= <<param>> ( COMMA <<param>> ) *
meta semi_colon_separated_list ::= <<param>> ( SEMICOLON <<param>> )* SEMICOLON
declarations                ::= declaration
declaration                 ::= LBRACE styleset? RBRACE //{pin=1 recoverWhile=rule_recover}
inner styleset              ::= <<semi_colon_separated_list style>>
inner style                 ::= set_ident | key_value
private set_ident           ::= SET IDENT //{pin=1 recoverWhile=statement_recover}
private key_value           ::= IDENT COLON specifier // {pin=2 recoverWhile=statement_recover}
specifier                   ::= function | sizes | IDENT? colour | url | eval | STRING | allowable_ident
// This is needed since these are all allowable identifiers in some locations.
private allowable_ident     ::= (IDENT | NODE | WAY | LINE | AREA | RELATION | CANVAS | META)
sizes                       ::= <<comma_separated_list size>>
size                        ::= equation units
colour                      ::= HEXCOLOR | "rgb" LPAR UFLOAT COMMA UFLOAT COMMA UFLOAT RPAR | "rgba" LPAR UFLOAT COMMA UFLOAT COMMA UFLOAT COMMA UFLOAT RPAR
url                         ::= "url" LPAR urlContent RPAR
urlContent                  ::= QUOTED | eval
units                       ::= "px" | "pt" | PERCENT |
eval                        ::= "eval" LPAR QUOTED RPAR
equation                    ::= LPAR? (number | function | LPAR | RPAR | SLASH | STAR | plus_minus)+ RPAR?
private plus_minus          ::= MINUS | PLUS
inner function              ::= <<tfunction function>>
private meta tfunction      ::= (IDENT | SETTING) LPAR <<comma_separated_list (STRING | <<param>> | IDENT | number)>> RPAR
private number              ::= UFLOAT | UINT
UFLOAT                      ::= UINT FULLSTOP UINT
private eof_recover         ::= !(<<eof>> | RBRACE)
private statement_recover   ::= !(SEMICOLON)